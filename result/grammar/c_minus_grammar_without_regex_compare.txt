Program -> ( compUnit )
decl|funcDef -> ( decl ) ( funcDef )
decl|funcDef* -> ( decl|funcDef decl|funcDef* ) ( $ )
compUnit -> ( decl|funcDef* 'EOF' )
decl -> ( constDecl ) ( varDecl )
n','constDef -> ( ',' constDef )
n','constDef* -> ( $ ) ( n','constDef n','constDef* )
constDecl -> ( 'const' bType constDef n','constDef* ';' )
bType -> ( 'int' )
constDef -> ( Ident '=' constInitVal )
constInitVal -> ( constExp )
n','varDef -> ( ',' varDef )
n','varDef* -> ( n','varDef n','varDef* ) ( $ )
varDecl -> ( bType varDef n','varDef* ';' )
varDef -> ( Ident '=' initVal ) ( Ident )
initVal -> ( exp )
funcFParams? -> ( funcFParams ) ( $ )
funcDef -> ( funcType Ident '(' funcFParams? ')' block )
funcType -> ( 'void' ) ( 'int' )
n','funcFParam -> ( ',' funcFParam )
n','funcFParam* -> ( n','funcFParam n','funcFParam* ) ( $ )
funcFParams -> ( funcFParam n','funcFParam* )
funcFParam -> ( bType Ident )
blockItem -> ( stmt ) ( decl )
blockItem* -> ( blockItem blockItem* ) ( $ )
block -> ( '{' blockItem* '}' )
exp? -> ( exp ) ( $ )
exp?' -> ( exp ) ( $ )
stmt -> ( lVal '=' exp ';' ) ( exp? ';' ) ( block ) ( 'return' exp?' ';' )
exp -> ( addExp )
cond -> ( lOrExp )
lVal -> ( Ident )
primaryExp -> ( lVal ) ( number ) ( '(' exp ')' )
number -> ( IntConst )
funcRParams? -> ( funcRParams ) ( $ )
unaryExp -> ( primaryExp ) ( Ident '(' funcRParams? ')' ) ( unaryOp unaryExp )
unaryOp -> ( '-' ) ( '!' ) ( '+' )
n','funcRParam -> ( ',' funcRParam )
n','funcRParam* -> ( n','funcRParam n','funcRParam* ) ( $ )
funcRParams -> ( funcRParam n','funcRParam* )
funcRParam -> ( exp )
n'*'|'/'|'%' -> ( '*' ) ( '/' ) ( '%' )
mulExp -> ( unaryExp ) ( mulExp n'*'|'/'|'%' unaryExp )
n'+'|'-' -> ( '+' ) ( '-' )
addExp -> ( addExp n'+'|'-' mulExp ) ( mulExp )
n'<'|'>'|'<='|'>=' -> ( '<' ) ( '>' ) ( '<=' ) ( '>=' )
relExp -> ( addExp ) ( relExp n'<'|'>'|'<='|'>=' addExp )
n'=='|'!=' -> ( '==' ) ( '!=' )
eqExp -> ( eqExp n'=='|'!=' relExp ) ( relExp )
lAndExp -> ( lAndExp '&&' eqExp ) ( eqExp )
lOrExp -> ( lAndExp ) ( lOrExp '||' lAndExp )
constExp -> ( addExp )
IntConst -> ( 'int' )
Ident -> ( 'idn' )

terminals: 'const' ')' '}' '/' '-' '=' '+' 'return' 'idn' '>' '!' $ '{' '>=' '*' '||' '!=' '<=' 'EOF' ',' '==' ';' 'void' '<' '(' '%' '&&' 'int'
non_terminals: addExp Program exp compUnit funcDef constExp number varDef n'+'|'-' n','funcRParam constInitVal stmt mulExp funcFParams? n','constDef funcRParams? blockItem* Ident cond eqExp relExp n'*'|'/'|'%' n','varDef exp? funcRParam constDef n','constDef* constDecl funcFParam varDecl block lVal funcRParams funcFParams funcType decl|funcDef* decl n','funcFParam n'<'|'>'|'<='|'>=' n','varDef* lOrExp n','funcFParam* IntConst initVal n'=='|'!=' blockItem unaryExp decl|funcDef primaryExp unaryOp n','funcRParam* bType lAndExp exp?'
s: Program
