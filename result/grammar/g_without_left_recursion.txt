Program -> ( compUnit )
decl|funcDef -> ( 'int' , varDef , n','varDef* , ';' ) ( funcDef ) ( 'const' , bType , constDef , n','constDef* , ';' )
decl|funcDef* -> ( $ ) ( decl|funcDef , decl|funcDef* )
compUnit -> ( decl|funcDef* , 'EOF' )
n','constDef* -> ( $ ) ( ',' , constDef , n','constDef* )
bType -> ( 'int' )
constDef -> ( 'idn' , '=' , constInitVal )
constInitVal -> ( '(' , exp , ')' , mulExp' , addExp' ) ( '+' , unaryExp , mulExp' , addExp' ) ( '-' , unaryExp , mulExp' , addExp' ) ( 'idn' , mulExp' , addExp' ) ( '!' , unaryExp , mulExp' , addExp' ) ( 'int' , mulExp' , addExp' ) ( 'idn' , '(' , funcRParams? , ')' , mulExp' , addExp' )
n','varDef* -> ( $ ) ( ',' , varDef , n','varDef* )
varDef -> ( Ident ) ( Ident , '=' , initVal )
initVal -> ( exp )
funcFParams? -> ( $ ) ( funcFParams )
funcDef -> ( 'void' , Ident , '(' , funcFParams? , ')' , block ) ( 'int' , Ident , '(' , funcFParams? , ')' , block )
n','funcFParam* -> ( $ ) ( ',' , funcFParam , n','funcFParam* )
funcFParams -> ( 'int' , Ident , n','funcFParam* )
funcFParam -> ( bType , Ident )
blockItem* -> ( '+' , unaryExp , mulExp' , addExp' , ';' , blockItem* ) ( $ , ';' , blockItem* ) ( 'idn' , '(' , funcRParams? , ')' , mulExp' , addExp' , ';' , blockItem* ) ( lVal , mulExp' , addExp' , ';' , blockItem* ) ( 'return' , exp? , ';' , blockItem* ) ( $ ) ( '(' , exp , ')' , mulExp' , addExp' , ';' , blockItem* ) ( '-' , unaryExp , mulExp' , addExp' , ';' , blockItem* ) ( '{' , blockItem* , '}' , blockItem* ) ( '!' , unaryExp , mulExp' , addExp' , ';' , blockItem* ) ( 'int' , mulExp' , addExp' , ';' , blockItem* ) ( 'const' , bType , constDef , n','constDef* , ';' , blockItem* ) ( lVal , '=' , exp , ';' , blockItem* ) ( 'int' , varDef , n','varDef* , ';' , blockItem* )
block -> ( '{' , blockItem* , '}' )
exp? -> ( '+' , unaryExp , mulExp' , addExp' ) ( '-' , unaryExp , mulExp' , addExp' ) ( $ ) ( '!' , unaryExp , mulExp' , addExp' ) ( 'idn' , '(' , funcRParams? , ')' , mulExp' , addExp' ) ( primaryExp , mulExp' , addExp' )
exp -> ( '+' , unaryExp , mulExp' , addExp' ) ( '-' , unaryExp , mulExp' , addExp' ) ( '!' , unaryExp , mulExp' , addExp' ) ( 'idn' , '(' , funcRParams? , ')' , mulExp' , addExp' ) ( primaryExp , mulExp' , addExp' )
lVal -> ( 'idn' )
primaryExp -> ( '(' , exp , ')' ) ( lVal ) ( 'int' )
funcRParams? -> ( $ ) ( exp , n','funcRParam* )
unaryExp -> ( Ident , '(' , funcRParams? , ')' ) ( primaryExp ) ( unaryOp , unaryExp )
unaryOp -> ( '+' ) ( '!' ) ( '-' )
n','funcRParam* -> ( $ ) ( ',' , funcRParam , n','funcRParam* )
funcRParam -> ( exp )
n'*'|'/'|'%' -> ( '%' ) ( '*' ) ( '/' )
mulExp -> ( Ident , '(' , funcRParams? , ')' , mulExp' ) ( unaryOp , unaryExp , mulExp' ) ( primaryExp , mulExp' )
n'+'|'-' -> ( '-' ) ( '+' )
Ident -> ( 'idn' )
mulExp' -> ( $ ) ( n'*'|'/'|'%' , unaryExp , mulExp' )
addExp' -> ( $ ) ( n'+'|'-' , mulExp , addExp' )

terminals: '%' '<=' '<' '!=' 'idn' '(' '/' '=' ',' '-' ';' $ '}' '+' 'return' 'const' '==' 'int' 'void' '{' '>=' '!' '*' '>' '&&' ')' '||' 'EOF'
non_terminals: funcFParam Program mulExp unaryOp varDef Ident funcRParam funcRParams? initVal constDef compUnit addExp' mulExp' funcFParams? n'*'|'/'|'%' decl|funcDef* exp exp? n','varDef* n','funcFParam* primaryExp n','constDef* constInitVal bType block n','funcRParam* lVal decl|funcDef funcDef blockItem* funcFParams n'+'|'-' unaryExp
s: Program
