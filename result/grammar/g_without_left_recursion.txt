Program -> ( compUnit )
decl|funcDef* -> ( 'void' , Ident , '(' , funcFParams? , ')' , block , decl|funcDef* ) ( 'const' , bType , constDef , n','constDef* , ';' , decl|funcDef* ) ( 'int' , Ident , '(' , funcFParams? , ')' , block , decl|funcDef* ) ( varDecl , decl|funcDef* ) ( $ )
compUnit -> ( decl|funcDef* , 'EOF' )
n','constDef* -> ( ',' , constDef , n','constDef* ) ( $ )
bType -> ( 'int' )
constDef -> ( 'idn' , '=' , constInitVal )
constInitVal -> ( addExp )
n','varDef* -> ( ',' , varDef , n','varDef* ) ( $ )
varDecl -> ( 'int' , varDef , n','varDef* , ';' )
varDef -> ( Ident ) ( Ident , '=' , initVal )
initVal -> ( addExp )
funcFParams? -> ( funcFParams ) ( $ )
n','funcFParam* -> ( ',' , funcFParam , n','funcFParam* ) ( $ )
funcFParams -> ( 'int' , Ident , n','funcFParam* )
funcFParam -> ( bType , Ident )
blockItem* -> ( 'return' , exp? , ';' , blockItem* ) ( block , blockItem* ) ( ';' , blockItem* ) ( 'idn' , '=' , exp , ';' , blockItem* ) ( addExp , ';' , blockItem* ) ( $ ) ( 'const' , bType , constDef , n','constDef* , ';' , blockItem* ) ( varDecl , blockItem* )
block -> ( '{' , blockItem* , '}' )
exp? -> ( addExp ) ( $ )
exp -> ( addExp )
number -> ( IntConst )
funcRParams? -> ( funcRParams ) ( $ )
unaryExp -> ( Ident ) ( number ) ( unaryOp , unaryExp ) ( '(' , exp , ')' ) ( Ident , '(' , funcRParams? , ')' )
unaryOp -> ( '-' ) ( '+' ) ( '!' )
n','funcRParam* -> ( ',' , funcRParam , n','funcRParam* ) ( $ )
funcRParams -> ( addExp , n','funcRParam* )
funcRParam -> ( exp )
n'*'|'/'|'%' -> ( '%' ) ( '*' ) ( '/' )
mulExp -> ( 'idn' , '(' , funcRParams? , ')' , mulExp' ) ( 'idn' , mulExp' ) ( '(' , exp , ')' , mulExp' ) ( IntConst , mulExp' ) ( unaryOp , unaryExp , mulExp' )
n'+'|'-' -> ( '-' ) ( '+' )
addExp -> ( '-' , unaryExp , mulExp' , addExp' ) ( 'idn' , '(' , funcRParams? , ')' , mulExp' , addExp' ) ( '(' , exp , ')' , mulExp' , addExp' ) ( '+' , unaryExp , mulExp' , addExp' ) ( '!' , unaryExp , mulExp' , addExp' ) ( 'idn' , mulExp' , addExp' ) ( IntConst , mulExp' , addExp' )
IntConst -> ( 'int' )
Ident -> ( 'idn' )
mulExp' -> ( n'*'|'/'|'%' , unaryExp , mulExp' ) ( $ )
addExp' -> ( n'+'|'-' , mulExp , addExp' ) ( $ )

terminals: '!' '>' '%' 'return' '<' '{' '==' '}' $ 'void' 'const' '>=' '-' ')' '/' '||' 'EOF' '(' '+' 'idn' '&&' '!=' '*' 'int' '<=' ';' ',' '='
non_terminals: funcFParam n','funcFParam* varDef funcRParam bType funcRParams? n'*'|'/'|'%' addExp' Program unaryExp exp Ident compUnit exp? number n','varDef* mulExp unaryOp mulExp' n'+'|'-' funcRParams n','constDef* initVal blockItem* n','funcRParam* block constInitVal funcFParams? addExp IntConst funcFParams constDef decl|funcDef* varDecl
s: Program
