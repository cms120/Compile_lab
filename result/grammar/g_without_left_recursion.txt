Program -> ( decl|funcDef* , 'EOF' )
decl|funcDef -> ( funcType , Ident , '(' , funcFParams? , ')' , block ) ( bType , varDef , n','varDef* , ';' ) ( 'const' , bType , constDef , n','constDef* , ';' )
decl|funcDef* -> ( decl|funcDef , decl|funcDef* ) ( $ )
n','constDef* -> ( ',' , constDef , n','constDef* ) ( $ )
bType -> ( 'int' )
constDef -> ( Ident , '=' , constInitVal )
constInitVal -> ( '(' , exp , ')' , mulExp' , addExp' ) ( lVal , mulExp' , addExp' ) ( unaryOp , unaryExp , mulExp' , addExp' ) ( 'idn' , '(' , funcRParams? , ')' , mulExp' , addExp' ) ( IntConst , mulExp' , addExp' )
n','varDef -> ( ',' , varDef )
n','varDef* -> ( $ ) ( n','varDef , n','varDef* )
varDef -> ( 'idn' , '=' , initVal ) ( 'idn' )
initVal -> ( '(' , exp , ')' , mulExp' , addExp' ) ( lVal , mulExp' , addExp' ) ( unaryOp , unaryExp , mulExp' , addExp' ) ( 'idn' , '(' , funcRParams? , ')' , mulExp' , addExp' ) ( IntConst , mulExp' , addExp' )
funcFParams? -> ( 'int' , Ident , n','funcFParam* ) ( $ )
funcType -> ( 'int' ) ( 'void' )
n','funcFParam -> ( ',' , funcFParam )
n','funcFParam* -> ( n','funcFParam , n','funcFParam* ) ( $ )
funcFParam -> ( 'int' , Ident )
blockItem* -> ( $ , ';' , blockItem* ) ( 'idn' , '(' , funcRParams? , ')' , mulExp' , addExp' , ';' , blockItem* ) ( '+' , unaryExp , mulExp' , addExp' , ';' , blockItem* ) ( '(' , exp , ')' , mulExp' , addExp' , ';' , blockItem* ) ( '{' , blockItem* , '}' , blockItem* ) ( '-' , unaryExp , mulExp' , addExp' , ';' , blockItem* ) ( 'return' , exp? , ';' , blockItem* ) ( $ ) ( lVal , '=' , exp , ';' , blockItem* ) ( 'int' , mulExp' , addExp' , ';' , blockItem* ) ( 'int' , varDef , n','varDef* , ';' , blockItem* ) ( lVal , mulExp' , addExp' , ';' , blockItem* ) ( 'const' , bType , constDef , n','constDef* , ';' , blockItem* ) ( '!' , unaryExp , mulExp' , addExp' , ';' , blockItem* )
block -> ( '{' , blockItem* , '}' )
exp? -> ( exp ) ( $ )
exp -> ( '(' , exp , ')' , mulExp' , addExp' ) ( lVal , mulExp' , addExp' ) ( unaryOp , unaryExp , mulExp' , addExp' ) ( 'idn' , '(' , funcRParams? , ')' , mulExp' , addExp' ) ( IntConst , mulExp' , addExp' )
lVal -> ( 'idn' )
primaryExp -> ( '(' , exp , ')' ) ( IntConst ) ( lVal )
funcRParams? -> ( funcRParams ) ( $ )
unaryExp -> ( Ident , '(' , funcRParams? , ')' ) ( unaryOp , unaryExp ) ( primaryExp )
unaryOp -> ( '!' ) ( '-' ) ( '+' )
n','funcRParam -> ( ',' , funcRParam )
n','funcRParam* -> ( n','funcRParam , n','funcRParam* ) ( $ )
funcRParams -> ( lVal , mulExp' , addExp' , n','funcRParam* ) ( '(' , exp , ')' , mulExp' , addExp' , n','funcRParam* ) ( unaryOp , unaryExp , mulExp' , addExp' , n','funcRParam* ) ( IntConst , mulExp' , addExp' , n','funcRParam* ) ( 'idn' , '(' , funcRParams? , ')' , mulExp' , addExp' , n','funcRParam* )
funcRParam -> ( '(' , exp , ')' , mulExp' , addExp' ) ( lVal , mulExp' , addExp' ) ( unaryOp , unaryExp , mulExp' , addExp' ) ( 'idn' , '(' , funcRParams? , ')' , mulExp' , addExp' ) ( IntConst , mulExp' , addExp' )
n'*'|'/'|'%' -> ( '%' ) ( '/' ) ( '*' )
mulExp -> ( Ident , '(' , funcRParams? , ')' , mulExp' ) ( unaryOp , unaryExp , mulExp' ) ( primaryExp , mulExp' )
n'+'|'-' -> ( '-' ) ( '+' )
IntConst -> ( 'int' )
Ident -> ( 'idn' )
mulExp' -> ( n'*'|'/'|'%' , unaryExp , mulExp' ) ( $ )
addExp' -> ( n'+'|'-' , mulExp , addExp' ) ( $ )

terminals: '+' '{' '&&' 'void' '*' '>' '%' ',' '-' ')' 'const' '==' '!=' '>=' '(' 'return' 'int' '}' '!' 'EOF' 'idn' '/' $ '=' '<' '<=' '||' ';'
non_terminals: n','varDef* Program exp? n','funcRParam* unaryExp mulExp funcRParams? n'+'|'-' decl|funcDef* primaryExp decl|funcDef constDef Ident n','funcRParam exp varDef funcType n','constDef* n'*'|'/'|'%' constInitVal block n','funcFParam* initVal funcRParam funcRParams bType mulExp' IntConst unaryOp n','funcFParam funcFParam addExp' blockItem* lVal funcFParams? n','varDef
s: Program
