Program -> ( 'int' , Program' ) ( 'const' , bType , constDef , n','constDef* , ';' , decl|funcDef* , 'EOF' ) ( 'void' , Ident , '(' , funcFParams? , ')' , block , decl|funcDef* , 'EOF' ) ( $ , 'EOF' )
decl|funcDef* -> ( funcDef , decl|funcDef* ) ( $ ) ( varDecl , decl|funcDef* ) ( 'const' , bType , constDef , n','constDef* , ';' , decl|funcDef* )
n','constDef -> ( ',' , constDef )
n','constDef* -> ( $ ) ( n','constDef , n','constDef* )
constDecl -> ( 'const' , bType , constDef , n','constDef* , ';' )
bType -> ( 'int' )
constDef -> ( Ident , '=' , constInitVal )
constInitVal -> ( constExp )
n','varDef -> ( ',' , varDef )
n','varDef* -> ( $ ) ( n','varDef , n','varDef* )
varDecl -> ( bType , varDef , n','varDef* , ';' )
varDef -> ( 'idn' , varDef' )
initVal -> ( exp )
funcFParams? -> ( $ ) ( bType , Ident , n','funcFParam* )
funcDef -> ( 'void' , Ident , '(' , funcFParams? , ')' , block ) ( 'int' , Ident , '(' , funcFParams? , ')' , block )
n','funcFParam -> ( ',' , funcFParam )
n','funcFParam* -> ( $ ) ( n','funcFParam , n','funcFParam* )
funcFParam -> ( bType , Ident )
blockItem -> ( varDecl ) ( stmt ) ( constDecl )
blockItem* -> ( $ ) ( blockItem , blockItem* )
block -> ( '{' , blockItem* , '}' )
exp? -> ( $ ) ( exp )
stmt -> ( $ , ';' ) ( 'return' , exp? , ';' ) ( '(' , exp , ')' , mulExp' , addExp' , ';' ) ( '!' , unaryExp , mulExp' , addExp' , ';' ) ( '-' , unaryExp , mulExp' , addExp' , ';' ) ( 'idn' , stmt' ) ( '+' , unaryExp , mulExp' , addExp' , ';' ) ( 'int' , mulExp' , addExp' , ';' ) ( '{' , blockItem* , '}' )
exp -> ( 'int' , mulExp' , addExp' ) ( '!' , unaryExp , mulExp' , addExp' ) ( 'idn' , exp' ) ( '(' , exp , ')' , mulExp' , addExp' ) ( '-' , unaryExp , mulExp' , addExp' ) ( '+' , unaryExp , mulExp' , addExp' )
lVal -> ( Ident )
primaryExp -> ( '(' , exp , ')' ) ( lVal ) ( number )
number -> ( 'int' )
funcRParams? -> ( $ ) ( funcRParam , n','funcRParam* )
unaryExp -> ( primaryExp ) ( Ident , '(' , funcRParams? , ')' ) ( unaryOp , unaryExp )
unaryOp -> ( '!' ) ( '-' ) ( '+' )
n','funcRParam* -> ( ',' , funcRParam , n','funcRParam* ) ( $ )
funcRParam -> ( exp )
n'*'|'/'|'%' -> ( '*' ) ( '%' ) ( '/' )
mulExp -> ( '-' , unaryExp , mulExp' ) ( '+' , unaryExp , mulExp' ) ( '!' , unaryExp , mulExp' ) ( 'idn' , mulExp'' ) ( 'int' , mulExp' ) ( '(' , exp , ')' , mulExp' )
n'+'|'-' -> ( '-' ) ( '+' )
constExp -> ( 'int' , mulExp' , addExp' ) ( '!' , unaryExp , mulExp' , addExp' ) ( '+' , unaryExp , mulExp' , addExp' ) ( '(' , exp , ')' , mulExp' , addExp' ) ( '-' , unaryExp , mulExp' , addExp' ) ( 'idn' , constExp' )
Ident -> ( 'idn' )
addExp' -> ( $ ) ( n'+'|'-' , mulExp , addExp' )
mulExp' -> ( n'*'|'/'|'%' , unaryExp , mulExp' ) ( $ )
mulExp'' -> ( '(' , funcRParams? , ')' , mulExp' ) ( mulExp' )
exp' -> ( '(' , funcRParams? , ')' , mulExp' , addExp' ) ( mulExp' , addExp' )
stmt' -> ( '=' , exp , ';' ) ( '(' , funcRParams? , ')' , mulExp' , addExp' , ';' ) ( mulExp' , addExp' , ';' )
constExp' -> ( '(' , funcRParams? , ')' , mulExp' , addExp' ) ( mulExp' , addExp' )
Program' -> ( Ident , '(' , funcFParams? , ')' , block , decl|funcDef* , 'EOF' ) ( varDef , n','varDef* , ';' , decl|funcDef* , 'EOF' )
varDef' -> ( '=' , initVal ) ( $ )

terminals: '(' '}' '{' 'void' '>=' $ 'const' '!=' ';' '=' 'idn' '<=' '>' '!' 'EOF' '%' '/' ',' 'return' '+' '-' '&&' ')' '==' '*' '||' 'int' '<'
non_terminals: blockItem* n','constDef* mulExp' block n','varDef* Program' unaryExp n'*'|'/'|'%' blockItem n','constDef constDecl n','funcFParam* constInitVal constExp' stmt' constDef funcFParam primaryExp exp' number addExp' bType lVal n','varDef Ident exp? funcRParams? decl|funcDef* n'+'|'-' varDef' unaryOp initVal mulExp n','funcRParam* varDecl mulExp'' funcDef n','funcFParam exp stmt funcFParams? constExp funcRParam Program varDef
s: Program
