Program -> ( compUnit )
decl|funcDef -> ( decl ) ( funcDef )
decl|funcDef* -> ( decl|funcDef , decl|funcDef* ) ( $ )
compUnit -> ( decl|funcDef* , 'EOF' )
decl -> ( constDecl ) ( varDecl )
n','constDef -> ( ',' , constDef )
n','constDef* -> ( n','constDef , n','constDef* ) ( $ )
constDecl -> ( 'const' , bType , constDef , n','constDef* , ';' )
bType -> ( 'int' )
constDef -> ( Ident , '=' , constInitVal )
constInitVal -> ( constExp )
n','varDef -> ( ',' , varDef )
n','varDef* -> ( $ ) ( n','varDef , n','varDef* )
varDecl -> ( bType , varDef , n','varDef* , ';' )
varDef -> ( Ident , '=' , initVal ) ( Ident )
initVal -> ( exp )
funcFParams? -> ( funcFParams ) ( $ )
funcDef -> ( funcType , Ident , '(' , funcFParams? , ')' , block )
funcType -> ( 'int' ) ( 'void' )
n','funcFParam -> ( ',' , funcFParam )
n','funcFParam* -> ( n','funcFParam , n','funcFParam* ) ( $ )
funcFParams -> ( funcFParam , n','funcFParam* )
funcFParam -> ( bType , Ident )
blockItem -> ( stmt ) ( decl )
blockItem* -> ( blockItem , blockItem* ) ( $ )
block -> ( '{' , blockItem* , '}' )
exp? -> ( exp ) ( $ )
stmt -> ( 'return' , exp? , ';' ) ( block ) ( lVal , '=' , exp , ';' ) ( exp? , ';' )
exp -> ( addExp )
cond -> ( lOrExp )
lVal -> ( Ident )
primaryExp -> ( '(' , exp , ')' ) ( number ) ( lVal )
number -> ( IntConst )
funcRParams? -> ( funcRParams ) ( $ )
unaryExp -> ( Ident , '(' , funcRParams? , ')' ) ( unaryOp , unaryExp ) ( primaryExp )
unaryOp -> ( '!' ) ( '-' ) ( '+' )
n','funcRParam -> ( ',' , funcRParam )
n','funcRParam* -> ( n','funcRParam , n','funcRParam* ) ( $ )
funcRParams -> ( funcRParam , n','funcRParam* )
funcRParam -> ( exp )
n'*'|'/'|'%' -> ( '*' ) ( '/' ) ( '%' )
mulExp -> ( mulExp , n'*'|'/'|'%' , unaryExp ) ( unaryExp )
n'+'|'-' -> ( '+' ) ( '-' )
addExp -> ( mulExp ) ( addExp , n'+'|'-' , mulExp )
n'<'|'>'|'<='|'>=' -> ( '<' ) ( '>' ) ( '<=' ) ( '>=' )
relExp -> ( relExp , n'<'|'>'|'<='|'>=' , addExp ) ( addExp )
n'=='|'!=' -> ( '==' ) ( '!=' )
eqExp -> ( eqExp , n'=='|'!=' , relExp ) ( relExp )
lAndExp -> ( lAndExp , '&&' , eqExp ) ( eqExp )
lOrExp -> ( lOrExp , '||' , lAndExp ) ( lAndExp )
constExp -> ( addExp )
IntConst -> ( 'int' )
Ident -> ( 'idn' )

terminals: '+' '{' '&&' 'void' '*' '>' '%' ',' '-' ')' 'const' '==' '!=' '>=' '(' 'return' 'int' '}' '!' 'EOF' 'idn' '/' $ '=' '<' '<=' '||' ';'
non_terminals: compUnit constDecl n','varDef* stmt funcDef Program exp? n','funcRParam* unaryExp mulExp blockItem varDecl funcRParams? n'+'|'-' decl number decl|funcDef* primaryExp decl|funcDef addExp constDef n','constDef funcFParams Ident constExp eqExp lAndExp n'=='|'!=' n','funcRParam exp lOrExp varDef funcType n'<'|'>'|'<='|'>=' n','constDef* n'*'|'/'|'%' constInitVal block n','funcFParam* initVal funcRParam relExp funcRParams bType funcFParam n','funcFParam cond IntConst unaryOp blockItem* lVal funcFParams? n','varDef
s: Program
