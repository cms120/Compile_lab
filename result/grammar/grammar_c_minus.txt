program -> ( compUnit )
compUnit -> ( funcDef , compUnit ) ( $ ) ( decl , compUnit )
decl -> ( varDecl ) ( constDecl )
constDecl -> ( 'const' , bType , constDef , argConst , ';' )
argConst -> ( ',' , constDef , argConst ) ( $ )
constDef -> ( 'IDN' , '=' , constInitVal )
constInitVal -> ( constExp )
varDecl -> ( bType , varDef , argVarDecl , ';' )
argVarDecl -> ( $ ) ( ',' , varDef , argVarDecl )
varDef -> ( 'IDN' , argVarDef )
argVarDef -> ( $ ) ( '=' , initVal )
initVal -> ( exp )
bType -> ( 'int' )
funcDef -> ( funcType , 'IDN' , '(' , funcFParams , ')' , block )
funcType -> ( 'void' )
funcFParams -> ( $ ) ( funcFParam , argFunctionF )
argFunctionF -> ( $ ) ( ',' , funcFParam , argFunctionF )
funcFParam -> ( bType , 'IDN' )
block -> ( '{' , blockItem , '}' )
blockItem -> ( $ ) ( decl , blockItem ) ( stmt , blockItem )
stmt -> ( 'return' , argExp , ';' ) ( ';' ) ( exp , ';' ) ( block )
argExp -> ( exp ) ( $ )
exp -> ( assignExp )
lVal -> ( 'IDN' )
primaryExp -> ( number ) ( '(' , exp , ')' )
number -> ( 'INT' )
unaryOp -> ( '!' ) ( '+' ) ( '-' )
unaryExp -> ( 'IDN' , callFunc ) ( unaryOp , unaryExp ) ( primaryExp )
callFunc -> ( $ ) ( '(' , funcRParams , ')' )
funcRParams -> ( funcRParam , argFunctionR ) ( $ )
argFunctionR -> ( $ ) ( ',' , funcRParam , argFunctionR )
funcRParam -> ( exp )
mulExp -> ( unaryExp , mulExpAtom )
mulExpAtom -> ( $ ) ( '*' , unaryExp , mulExpAtom ) ( '%' , unaryExp , mulExpAtom ) ( '/' , unaryExp , mulExpAtom )
addExp -> ( mulExp , addExpAtom )
addExpAtom -> ( '+' , mulExp , addExpAtom ) ( $ ) ( '-' , mulExp , addExpAtom )
relExp -> ( addExp , relExpAtom )
relExpAtom -> ( '<' , addExp , relExpAtom ) ( '<=' , addExp , relExpAtom ) ( '>' , addExp , relExpAtom ) ( $ ) ( '>=' , addExp , relExpAtom )
eqExp -> ( relExp , eqExpAtom )
eqExpAtom -> ( '!=' , relExp , eqExpAtom ) ( $ ) ( '==' , relExp , eqExpAtom )
assignExp -> ( eqExp , assignExpAtom )
assignExpAtom -> ( '=' , eqExp , assignExpAtom ) ( $ )
constExp -> ( assignExp )

terminals: { '!=' , '}' , '<' , '=' , '-' , '<=' , $ , ')' , '{' , 'void' , '*' , '==' , 'const' , '/' , 'IDN' , '+' , '!' , '%' , '(' , 'int' , '>' , ';' , '>=' , 'INT' , ',' , 'return' }
non_terminals: { unaryOp , lVal , exp , mulExp , funcDef , argFunctionR , mulExpAtom , decl , constExp , block , constDecl , compUnit , relExp , funcRParams , varDef , eqExpAtom , unaryExp , funcFParam , stmt , bType , constDef , constInitVal , argVarDef , funcType , assignExp , initVal , blockItem , varDecl , funcRParam , addExp , argExp , assignExpAtom , argFunctionF , relExpAtom , funcFParams , number , addExpAtom , argConst , eqExp , argVarDecl , callFunc , primaryExp , program }
s: program

first:
( constDecl ) : { 'const' }
( bType , varDef , argVarDecl , ';' ) : { 'int' }
( funcType , 'IDN' , '(' , funcFParams , ')' , block ) : { 'void' }
( bType , 'IDN' ) : { 'int' }
( block ) : { '{' }
( number ) : { 'INT' }
( unaryOp , unaryExp ) : { '-' , '+' , '!' }
( primaryExp ) : { '(' , 'INT' }
( unaryExp , mulExpAtom ) : { '(' , '-' , 'IDN' , '+' , '!' , 'INT' }
( mulExp , addExpAtom ) : { '(' , '-' , 'IDN' , '+' , '!' , 'INT' }
( addExp , relExpAtom ) : { '(' , '-' , 'IDN' , '+' , '!' , 'INT' }
( relExp , eqExpAtom ) : { '(' , '-' , 'IDN' , '+' , '!' , 'INT' }
( eqExp , assignExpAtom ) : { '(' , '-' , 'IDN' , '+' , '!' , 'INT' }
( assignExp ) : { '(' , '-' , 'IDN' , '+' , '!' , 'INT' }
( exp ) : { '(' , '-' , 'IDN' , '+' , '!' , 'INT' }
( funcRParam , argFunctionR ) : { '(' , '-' , 'IDN' , '+' , '!' , 'INT' }
( exp , ';' ) : { '(' , '-' , 'IDN' , '+' , '!' , 'INT' }
( stmt , blockItem ) : { '-' , 'IDN' , '+' , '!' , '{' , '(' , ';' , 'INT' , 'return' }
( funcFParam , argFunctionF ) : { 'int' }
( constExp ) : { '(' , '-' , 'IDN' , '+' , '!' , 'INT' }
( varDecl ) : { 'int' }
( decl , compUnit ) : { 'int' , 'const' }
( funcDef , compUnit ) : { 'void' }
( compUnit ) : { $ , 'void' , 'int' , 'const' }
( decl , blockItem ) : { 'int' , 'const' }

follow:
unaryOp : { '(' , '-' , 'IDN' , '+' , '!' , 'INT' }
lVal : { }
exp : { ';' , ',' , ')' }
mulExp : { '-' , '+' }
funcDef : { # , 'void' , 'int' , 'const' }
argFunctionR : { ')' }
mulExpAtom : { }
decl : { '}' , '-' , 'IDN' , '+' , '!' , # , '{' , 'void' , '(' , 'int' , ';' , 'INT' , 'const' , 'return' }
constExp : { ',' , ';' }
block : { '}' , '-' , '{' , 'void' , 'const' , 'IDN' , '+' , '!' , # , '(' , 'int' , ';' , 'INT' , 'return' }
constDecl : { # , 'void' , 'int' , 'const' }
compUnit : { # }
relExp : { '!=' , '==' }
funcRParams : { ')' }
varDef : { ',' , ';' }
eqExpAtom : { }
unaryExp : { '/' , '*' , '%' }
funcFParam : { ',' , ')' }
stmt : { '}' , '-' , 'IDN' , '+' , '!' , '{' , '(' , 'int' , ';' , 'INT' , 'const' , 'return' }
bType : { 'IDN' }
constDef : { ',' , ';' }
constInitVal : { ',' , ';' }
argVarDef : { ',' , ';' }
funcType : { 'IDN' }
assignExp : { ',' , ';' }
initVal : { ',' , ';' }
blockItem : { '}' }
varDecl : { # , 'void' , 'int' , 'const' }
funcRParam : { ',' , ')' }
addExp : { '<' , '<=' , '>' , '>=' }
argExp : { ';' }
assignExpAtom : { ',' , ';' }
argFunctionF : { ')' }
relExpAtom : { }
funcFParams : { ')' }
number : { }
addExpAtom : { }
argConst : { ';' }
eqExp : { '=' , ';' , ',' }
argVarDecl : { ';' }
callFunc : { }
primaryExp : { }
program : { # }
