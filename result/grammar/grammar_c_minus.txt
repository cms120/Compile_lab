program -> ( compUnit )
compUnit -> ( funcDef , compUnit ) ( $ ) ( decl , compUnit )
decl -> ( varDecl ) ( constDecl )
constDecl -> ( 'const' , bType , constDef , argConst , ';' )
argConst -> ( $ ) ( ',' , constDef , argConst )
constDef -> ( 'IDN' , '=' , constInitVal )
constInitVal -> ( constExp )
varDecl -> ( bType , varDef , argVarDecl , ';' )
argVarDecl -> ( ',' , varDef , argVarDecl ) ( $ )
varDef -> ( 'IDN' , argVarDef )
argVarDef -> ( $ ) ( '=' , initVal )
initVal -> ( exp )
bType -> ( 'int' )
funcDef -> ( funcType , 'IDN' , '(' , funcFParams , ')' , block )
funcType -> ( 'void' )
funcFParams -> ( $ ) ( funcFParam , argFunctionF )
argFunctionF -> ( $ ) ( ',' , funcFParam , argFunctionF )
funcFParam -> ( bType , 'IDN' )
block -> ( '{' , blockItem , '}' )
blockItem -> ( stmt , blockItem ) ( $ ) ( decl , blockItem )
stmt -> ( exp , ';' ) ( 'return' , argExp , ';' ) ( block ) ( ';' )
argExp -> ( exp ) ( $ )
exp -> ( assignExp )
lVal -> ( 'IDN' )
primaryExp -> ( '(' , exp , ')' ) ( number )
number -> ( 'INT' )
unaryOp -> ( '-' ) ( '!' ) ( '+' )
unaryExp -> ( primaryExp )
callFunc -> ( $ ) ( '(' , funcRParams , ')' )
funcRParams -> ( funcRParam , argFunctionR ) ( $ )
argFunctionR -> ( $ ) ( ',' , funcRParam , argFunctionR )
funcRParam -> ( exp )
mulExp -> ( unaryExp , mulExpAtom )
mulExpAtom -> ( '%' , unaryExp , mulExpAtom ) ( $ ) ( '*' , unaryExp , mulExpAtom ) ( '/' , unaryExp , mulExpAtom )
addExp -> ( mulExp , addExpAtom )
addExpAtom -> ( '+' , mulExp , addExpAtom ) ( $ ) ( '-' , mulExp , addExpAtom )
relExp -> ( addExp , relExpAtom )
relExpAtom -> ( $ ) ( '<=' , addExp , relExpAtom ) ( '>' , addExp , relExpAtom ) ( '>=' , addExp , relExpAtom ) ( '<' , addExp , relExpAtom )
eqExp -> ( relExp , eqExpAtom )
eqExpAtom -> ( '==' , relExp , eqExpAtom ) ( $ ) ( '!=' , relExp , eqExpAtom )
assignExp -> ( eqExp , assignExpAtom )
assignExpAtom -> ( $ ) ( '=' , eqExp , assignExpAtom )
constExp -> ( assignExp )

terminals: { '}' , ',' , 'int' , '{' , '+' , '<' , '>=' , '(' , ')' , '!' , '>' , '-' , $ , 'const' , 'INT' , ';' , '=' , '==' , '*' , '/' , '!=' , 'IDN' , '<=' , 'return' , '%' , 'void' }
non_terminals: { funcFParam , compUnit , relExp , funcRParams , number , constDecl , varDef , mulExpAtom , decl , argConst , funcFParams , varDecl , relExpAtom , argExp , funcRParam , block , constExp , blockItem , callFunc , unaryOp , mulExp , stmt , lVal , primaryExp , assignExpAtom , program , constDef , initVal , addExp , argVarDef , argFunctionF , funcDef , eqExpAtom , bType , unaryExp , argFunctionR , assignExp , funcType , exp , argVarDecl , constInitVal , eqExp , addExpAtom }
s: program
first:
( constDecl ) : { 'const' }
( bType , varDef , argVarDecl , ';' ) : { 'int' }
( funcType , 'IDN' , '(' , funcFParams , ')' , block ) : { 'void' }
( bType , 'IDN' ) : { 'int' }
( block ) : { '{' }
( number ) : { 'INT' }
( primaryExp ) : { 'INT' , '(' }
( unaryExp , mulExpAtom ) : { 'INT' , '(' }
( mulExp , addExpAtom ) : { 'INT' , '(' }
( addExp , relExpAtom ) : { 'INT' , '(' }
( relExp , eqExpAtom ) : { 'INT' , '(' }
( eqExp , assignExpAtom ) : { 'INT' , '(' }
( assignExp ) : { 'INT' , '(' }
( exp ) : { 'INT' , '(' }
( funcRParam , argFunctionR ) : { 'INT' , '(' }
( exp , ';' ) : { 'INT' , '(' }
( stmt , blockItem ) : { 'INT' , '(' , 'return' , ';' , '{' }
( funcFParam , argFunctionF ) : { 'int' }
( constExp ) : { 'INT' , '(' }
( varDecl ) : { 'int' }
( decl , compUnit ) : { 'int' , 'const' }
( funcDef , compUnit ) : { 'void' }
( compUnit ) : { $ , 'const' , 'void' , 'int' }
( decl , blockItem ) : { 'int' , 'const' }
follow:
funcFParam : { ',' , ')' }
compUnit : { # }
relExp : { '!=' , '==' }
funcRParams : { ')' }
number :  }
constDecl : { 'int' , 'const' , 'void' , # }
varDef : { ';' , ',' }
mulExpAtom :  }
decl : { 'INT' , 'const' , '}' , ';' , 'int' , '{' , # , '(' , 'return' , 'void' }
argConst : { ';' }
funcFParams : { ')' }
varDecl : { 'int' , 'const' , 'void' , # }
relExpAtom :  }
argExp : { ';' }
funcRParam : { ',' , ')' }
block : { 'INT' , 'const' , '}' , ';' , 'int' , '{' , # , '(' , 'return' , 'void' }
constExp : { ';' , ',' }
blockItem : { '}' }
callFunc :  }
unaryOp :  }
mulExp : { '-' , '+' }
stmt : { 'INT' , 'const' , '}' , ';' , '(' , 'return' , 'int' , '{' }
lVal :  }
primaryExp :  }
assignExpAtom : { ';' , ',' }
program : { # }
constDef : { ';' , ',' }
initVal : { ';' , ',' }
addExp : { '<' , '>=' , '<=' , '>' }
argVarDef : { ';' , ',' }
argFunctionF : { ')' }
funcDef : { 'int' , 'const' , 'void' , # }
eqExpAtom :  }
bType : { 'IDN' }
unaryExp : { '*' , '%' , '/' }
argFunctionR : { ')' }
assignExp : { ';' , ',' }
funcType : { 'IDN' }
exp : { ';' , ',' , ')' }
argVarDecl : { ';' }
constInitVal : { ';' , ',' }
eqExp : { '=' , ',' , ';' }
addExpAtom :  }
