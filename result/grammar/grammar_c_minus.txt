program -> ( compUnit )
compUnit -> ( decl , compUnit ) ( $ ) ( funcDef , compUnit )
decl -> ( varDecl ) ( constDecl )
constDecl -> ( 'const' , bType , constDef , argConst , ';' )
argConst -> ( $ ) ( ',' , constDef , argConst )
constDef -> ( 'IDN' , '=' , constInitVal )
constInitVal -> ( constExp )
varDecl -> ( bType , varDef , argVarDecl , ';' )
argVarDecl -> ( $ ) ( ',' , varDef , argVarDecl )
varDef -> ( 'IDN' , argVarDef )
argVarDef -> ( $ ) ( '=' , initVal )
initVal -> ( exp )
bType -> ( 'int' )
funcDef -> ( funcType , 'IDN' , '(' , funcFParams , ')' , block )
funcType -> ( 'void' )
funcFParams -> ( $ ) ( funcFParam , argFunctionF )
argFunctionF -> ( ',' , funcFParam , argFunctionF ) ( $ )
funcFParam -> ( bType , 'IDN' )
block -> ( '{' , blockItem , '}' )
blockItem -> ( stmt , blockItem ) ( decl , blockItem ) ( $ )
stmt -> ( block ) ( ';' ) ( exp , ';' ) ( 'return' , argExp , ';' )
argExp -> ( $ ) ( exp )
exp -> ( assignExp )
lVal -> ( 'IDN' )
primaryExp -> ( number ) ( '(' , exp , ')' )
number -> ( 'INT' )
unaryOp -> ( '!' ) ( '-' ) ( '+' )
unaryExp -> ( primaryExp )
callFunc -> ( '(' , funcRParams , ')' ) ( $ )
funcRParams -> ( $ ) ( funcRParam , argFunctionR )
argFunctionR -> ( $ ) ( ',' , funcRParam , argFunctionR )
funcRParam -> ( exp )
mulExp -> ( unaryExp , mulExpAtom )
mulExpAtom -> ( '/' , unaryExp , mulExpAtom ) ( $ ) ( '%' , unaryExp , mulExpAtom ) ( '*' , unaryExp , mulExpAtom )
addExp -> ( mulExp , addExpAtom )
addExpAtom -> ( $ ) ( '+' , mulExp , addExpAtom ) ( '-' , mulExp , addExpAtom )
relExp -> ( addExp , relExpAtom )
relExpAtom -> ( '<' , addExp , relExpAtom ) ( $ ) ( '>=' , addExp , relExpAtom ) ( '>' , addExp , relExpAtom ) ( '<=' , addExp , relExpAtom )
eqExp -> ( relExp , eqExpAtom )
eqExpAtom -> ( '==' , relExp , eqExpAtom ) ( '!=' , relExp , eqExpAtom ) ( $ )
assignExp -> ( eqExp , assignExpAtom )
assignExpAtom -> ( '=' , eqExp , assignExpAtom ) ( $ )
constExp -> ( assignExp )

terminals: { 'IDN' , 'return' , '+' , 'int' , '==' , '!=' , 'const' , '>=' , 'INT' , ',' , '(' , '=' , '%' , '<' , '/' , '>' , 'void' , '{' , '}' , $ , '!' , '*' , '<=' , ')' , ';' , '-' }
non_terminals: { initVal , argFunctionR , argFunctionF , mulExpAtom , eqExpAtom , funcFParams , program , bType , relExpAtom , exp , compUnit , argExp , funcType , unaryOp , funcFParam , block , unaryExp , constInitVal , constDef , addExpAtom , argVarDecl , constDecl , constExp , eqExp , callFunc , assignExpAtom , number , funcDef , blockItem , lVal , argConst , addExp , funcRParam , stmt , decl , varDef , relExp , funcRParams , argVarDef , primaryExp , assignExp , varDecl , mulExp }
s: program

first:
( constDecl ) : { 'const' }
( bType , varDef , argVarDecl , ';' ) : { 'int' }
( funcType , 'IDN' , '(' , funcFParams , ')' , block ) : { 'void' }
( bType , 'IDN' ) : { 'int' }
( block ) : { '{' }
( number ) : { 'INT' }
( primaryExp ) : { 'INT' , '(' }
( unaryExp , mulExpAtom ) : { 'INT' , '(' }
( mulExp , addExpAtom ) : { 'INT' , '(' }
( addExp , relExpAtom ) : { 'INT' , '(' }
( relExp , eqExpAtom ) : { 'INT' , '(' }
( eqExp , assignExpAtom ) : { 'INT' , '(' }
( assignExp ) : { 'INT' , '(' }
( exp ) : { 'INT' , '(' }
( funcRParam , argFunctionR ) : { 'INT' , '(' }
( exp , ';' ) : { 'INT' , '(' }
( stmt , blockItem ) : { 'return' , '(' , ';' , '{' , 'INT' }
( funcFParam , argFunctionF ) : { 'int' }
( constExp ) : { 'INT' , '(' }
( varDecl ) : { 'int' }
( funcDef , compUnit ) : { 'void' }
( decl , compUnit ) : { 'const' , 'int' }
( compUnit ) : { 'void' , 'int' , $ , 'const' }
( decl , blockItem ) : { 'const' , 'int' }

follow:
initVal : { ',' , ';' , $ }
argFunctionR : { ')' }
argFunctionF : { ')' }
mulExpAtom : { }
eqExpAtom : { }
funcFParams : { ')' }
program : { # }
bType : { 'IDN' }
relExpAtom : { }
exp : { ')' , ';' , ',' , $ }
compUnit : { # }
argExp : { ';' }
funcType : { 'IDN' }
unaryOp : { }
funcFParam : { ')' , ',' , $ }
block : { 'return' , 'void' , 'int' , '{' , '}' , $ , 'const' , ';' , 'INT' , # , '(' }
unaryExp : { '/' , '*' , $ , '%' }
constInitVal : { ',' , ';' , $ }
constDef : { ',' , ';' , $ }
addExpAtom : { }
argVarDecl : { ';' }
constDecl : { 'const' , 'void' , 'int' , # , $ }
constExp : { ',' , ';' , $ }
eqExp : { $ , ';' , ',' , '=' }
callFunc : { }
assignExpAtom : { ',' , ';' , $ }
number : { }
funcDef : { 'const' , 'void' , 'int' , # , $ }
blockItem : { '}' }
lVal : { }
argConst : { ';' }
addExp : { '<' , '<=' , $ , '>=' , '>' }
funcRParam : { ')' , ',' , $ }
stmt : { 'return' , 'int' , '{' , '}' , $ , 'const' , ';' , 'INT' , '(' }
decl : { 'return' , 'void' , 'int' , '{' , '}' , $ , 'const' , ';' , 'INT' , # , '(' }
varDef : { ',' , ';' , $ }
relExp : { '==' , '!=' , $ }
funcRParams : { ')' }
argVarDef : { ',' , ';' , $ }
primaryExp : { }
assignExp : { ';' , ',' , $ }
varDecl : { 'const' , 'void' , 'int' , # , $ }
mulExp : { '+' , '-' , $ }
