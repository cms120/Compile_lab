program -> ( compUnit )
compUnit -> ( decl , compUnit ) ( $ ) ( funcDef , compUnit )
decl -> ( varDecl ) ( constDecl )
constDecl -> ( 'const' , bType , constDef , argConst , ';' )
argConst -> ( ',' , constDef , argConst ) ( $ )
constDef -> ( 'IDN' , '=' , constInitVal )
constInitVal -> ( constExp )
varDecl -> ( bType , varDef , argVarDecl , ';' )
argVarDecl -> ( $ ) ( ',' , varDef , argVarDecl )
varDef -> ( 'IDN' , argVarDef )
argVarDef -> ( $ ) ( '=' , initVal )
initVal -> ( exp )
bType -> ( 'int' )
funcDef -> ( funcType , 'IDN' , '(' , funcFParams , ')' , block )
funcType -> ( 'void' )
funcFParams -> ( $ ) ( funcFParam , argFunctionF )
argFunctionF -> ( ',' , funcFParam , argFunctionF ) ( $ )
funcFParam -> ( bType , 'IDN' )
block -> ( '{' , blockItem , '}' )
blockItem -> ( decl , blockItem ) ( stmt , blockItem ) ( $ )
stmt -> ( ';' ) ( 'return' , argExp , ';' ) ( exp , ';' ) ( block )
argExp -> ( $ ) ( exp )
exp -> ( assignExp )
lVal -> ( 'IDN' )
primaryExp -> ( '(' , exp , ')' ) ( number )
number -> ( 'INT' )
unaryOp -> ( '!' ) ( '+' ) ( '-' )
unaryExp -> ( 'IDN' , callFunc ) ( primaryExp ) ( unaryOp , unaryExp )
callFunc -> ( '(' , funcRParams , ')' ) ( $ )
funcRParams -> ( funcRParam , argFunctionR ) ( $ )
argFunctionR -> ( $ ) ( ',' , funcRParam , argFunctionR )
funcRParam -> ( exp )
mulExp -> ( unaryExp , mulExpAtom )
mulExpAtom -> ( '/' , unaryExp , mulExpAtom ) ( '*' , unaryExp , mulExpAtom ) ( '%' , unaryExp , mulExpAtom ) ( $ )
addExp -> ( mulExp , addExpAtom )
addExpAtom -> ( $ ) ( '+' , mulExp , addExpAtom ) ( '-' , mulExp , addExpAtom )
relExp -> ( addExp , relExpAtom )
relExpAtom -> ( '<=' , addExp , relExpAtom ) ( '<' , addExp , relExpAtom ) ( '>' , addExp , relExpAtom ) ( '>=' , addExp , relExpAtom ) ( $ )
eqExp -> ( relExp , eqExpAtom )
eqExpAtom -> ( $ ) ( '!=' , relExp , eqExpAtom ) ( '==' , relExp , eqExpAtom )
assignExp -> ( eqExp , assignExpAtom )
assignExpAtom -> ( $ ) ( '=' , eqExp , assignExpAtom )
constExp -> ( assignExp )

terminals: { '!=' , '!' , 'return' , 'const' , '{' , ',' , '-' , '=' , '(' , '>' , ';' , '}' , '*' , '%' , '==' , $ , '/' , '<=' , '>=' , 'INT' , ')' , 'IDN' , 'int' , '<' , 'void' , '+' }
non_terminals: { lVal , constDef , varDecl , eqExp , mulExp , primaryExp , varDef , unaryOp , argVarDecl , block , assignExpAtom , argFunctionR , addExpAtom , mulExpAtom , constDecl , assignExp , compUnit , funcFParams , argExp , funcDef , exp , blockItem , eqExpAtom , unaryExp , argVarDef , relExp , relExpAtom , bType , funcRParam , initVal , funcRParams , constInitVal , addExp , funcType , program , decl , argConst , constExp , argFunctionF , number , stmt , callFunc , funcFParam }
s: program

first:
( constDecl ) : { 'const' }
( bType , varDef , argVarDecl , ';' ) : { 'int' }
( funcType , 'IDN' , '(' , funcFParams , ')' , block ) : { 'void' }
( bType , 'IDN' ) : { 'int' }
( block ) : { '{' }
( number ) : { 'INT' }
( primaryExp ) : { '(' , 'INT' }
( unaryOp , unaryExp ) : { '-' , '!' , '+' }
( unaryExp , mulExpAtom ) : { '-' , '+' , '(' , 'IDN' , '!' , 'INT' }
( mulExp , addExpAtom ) : { '-' , '+' , '(' , 'IDN' , '!' , 'INT' }
( addExp , relExpAtom ) : { '-' , '+' , '(' , 'IDN' , '!' , 'INT' }
( relExp , eqExpAtom ) : { '-' , '+' , '(' , 'IDN' , '!' , 'INT' }
( eqExp , assignExpAtom ) : { '-' , '+' , '(' , 'IDN' , '!' , 'INT' }
( assignExp ) : { '-' , '+' , '(' , 'IDN' , '!' , 'INT' }
( exp ) : { '-' , '+' , '(' , 'IDN' , '!' , 'INT' }
( funcRParam , argFunctionR ) : { '-' , '+' , '(' , 'IDN' , '!' , 'INT' }
( exp , ';' ) : { '-' , '+' , '(' , 'IDN' , '!' , 'INT' }
( stmt , blockItem ) : { '!' , 'return' , 'INT' , '{' , '-' , '(' , ';' , 'IDN' , '+' }
( funcFParam , argFunctionF ) : { 'int' }
( constExp ) : { '-' , '+' , '(' , 'IDN' , '!' , 'INT' }
( varDecl ) : { 'int' }
( funcDef , compUnit ) : { 'void' }
( decl , compUnit ) : { 'const' , 'int' }
( compUnit ) : { 'const' , 'int' , $ , 'void' }
( decl , blockItem ) : { 'const' , 'int' }

follow:
lVal : { }
constDef : { ',' , ';' }
varDecl : { '!' , 'return' , 'const' , '{' , '-' , '+' , '(' , ';' , '}' , # , 'INT' , 'IDN' , 'int' , 'void' }
eqExp : { ',' , ')' , '=' , ';' }
mulExp : { '!=' , '>' , '-' , ',' , '=' , '+' , ';' , '<=' , '>=' , ')' , '<' , '==' }
primaryExp : { '!=' , '>' , '-' , ',' , '=' , ';' , '*' , '%' , '==' , '/' , '<=' , '>=' , ')' , '<' , '+' }
varDef : { ',' , ';' }
unaryOp : { '!' , 'INT' , '-' , '(' , 'IDN' , '+' }
argVarDecl : { ';' }
block : { '!' , 'return' , 'const' , '{' , '-' , '+' , '(' , ';' , '}' , # , 'INT' , 'IDN' , 'int' , 'void' }
assignExpAtom : { ',' , ')' , ';' }
argFunctionR : { ')' }
addExpAtom : { '!=' , '>' , ',' , '=' , ';' , '<=' , '>=' , ')' , '<' , '==' }
mulExpAtom : { '!=' , '<' , '>' , '-' , '+' , ',' , '=' , ';' , '<=' , ')' , '>=' , '==' }
constDecl : { '!' , 'return' , 'const' , '{' , '-' , '+' , '(' , ';' , '}' , # , 'INT' , 'IDN' , 'int' , 'void' }
assignExp : { ',' , ')' , ';' }
compUnit : { # }
funcFParams : { ')' }
argExp : { ';' }
funcDef : { # , 'int' , 'const' , 'void' }
exp : { ',' , ')' , ';' }
blockItem : { '}' }
eqExpAtom : { ',' , ')' , '=' , ';' }
unaryExp : { '!=' , '<' , '>' , '-' , '+' , ',' , '=' , ';' , '*' , '%' , '/' , '<=' , ')' , '>=' , '==' }
argVarDef : { ',' , ';' }
relExp : { '!=' , ',' , ')' , '=' , ';' , '==' }
relExpAtom : { '!=' , ',' , ')' , '=' , ';' , '==' }
bType : { 'IDN' }
funcRParam : { ',' , ')' }
initVal : { ',' , ';' }
funcRParams : { ')' }
constInitVal : { ',' , ';' }
addExp : { '!=' , '<=' , '<' , '>' , ',' , ')' , '=' , ';' , '>=' , '==' }
funcType : { 'IDN' }
program : { # }
decl : { '!' , 'return' , 'const' , '{' , '-' , '(' , ';' , '}' , # , 'INT' , 'IDN' , 'int' , 'void' , '+' }
argConst : { ';' }
constExp : { ',' , ';' }
argFunctionF : { ')' }
number : { '!=' , '<' , '>' , '-' , ',' , '=' , ';' , '*' , '%' , '==' , '/' , '<=' , ')' , '>=' , '+' }
stmt : { '!' , 'return' , 'const' , '{' , '-' , '(' , ';' , '}' , 'INT' , 'IDN' , 'int' , '+' }
callFunc : { '!=' , '>' , '-' , ',' , '=' , ';' , '*' , '%' , '==' , '/' , '<=' , '>=' , ')' , '<' , '+' }
funcFParam : { ',' , ')' }
