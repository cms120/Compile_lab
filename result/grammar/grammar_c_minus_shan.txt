program -> ( compUnit )
compUnit -> ( decl , compUnit ) ( funcDef , compUnit ) ( $ )
decl -> ( constDecl ) ( varDecl )
constDecl -> ( 'const' , bType , constDef , argConst , ';' )
argConst -> ( ',' , constDef , argConst ) ( $ )
constDef -> ( 'IDN' , '=' , constInitVal )
constInitVal -> ( constExp )
varDecl -> ( bType , varDef , argVarDecl , ';' )
argVarDecl -> ( $ ) ( ',' , varDef , argVarDecl )
varDef -> ( 'IDN' , argVarDef )
argVarDef -> ( $ ) ( '=' , initVal )
initVal -> ( exp )
bType -> ( 'int' )
funcDef -> ( funcType , 'IDN' , '(' , funcFParams , ')' , block )
funcType -> ( 'void' )
funcFParams -> ( $ ) ( funcFParam , argFunctionF )
argFunctionF -> ( ',' , funcFParam , argFunctionF ) ( $ )
funcFParam -> ( bType , 'IDN' )
block -> ( '{' , blockItem , '}' )
blockItem -> ( decl , blockItem ) ( stmt , blockItem ) ( $ )
stmt -> ( exp , ';' ) ( 'return' , argExp , ';' ) ( ';' ) ( block )
argExp -> ( exp ) ( $ )
exp -> ( assignExp )
lVal -> ( 'IDN' )
primaryExp -> ( '(' , exp , ')' ) ( number )
number -> ( 'INT' )
unaryOp -> ( '!' ) ( '+' ) ( '-' )
unaryExp -> ( primaryExp )
callFunc -> ( '(' , funcRParams , ')' ) ( $ )
funcRParams -> ( $ ) ( funcRParam , argFunctionR )
argFunctionR -> ( ',' , funcRParam , argFunctionR ) ( $ )
funcRParam -> ( exp )
mulExp -> ( unaryExp , mulExpAtom )
mulExpAtom -> ( '%' , unaryExp , mulExpAtom ) ( '*' , unaryExp , mulExpAtom ) ( $ ) ( '/' , unaryExp , mulExpAtom )
addExp -> ( mulExp , addExpAtom )
addExpAtom -> ( $ ) ( '-' , mulExp , addExpAtom ) ( '+' , mulExp , addExpAtom )
relExp -> ( addExp , relExpAtom )
relExpAtom -> ( '<=' , addExp , relExpAtom ) ( $ ) ( '>' , addExp , relExpAtom ) ( '>=' , addExp , relExpAtom ) ( '<' , addExp , relExpAtom )
eqExp -> ( relExp , eqExpAtom )
eqExpAtom -> ( $ ) ( '==' , relExp , eqExpAtom ) ( '!=' , relExp , eqExpAtom )
assignExp -> ( eqExp , assignExpAtom )
assignExpAtom -> ( '=' , eqExp , assignExpAtom ) ( $ )
constExp -> ( assignExp )

terminals: { '*' , '{' , ';' , 'const' , 'IDN' , '==' , 'return' , '!=' , '>' , '>=' , '+' , ',' , '(' , '/' , 'void' , '}' , '%' , ')' , $ , '=' , 'INT' , '<' , '<=' , '-' , 'int' , '!' }
non_terminals: { stmt , unaryExp , funcFParams , argVarDef , primaryExp , program , bType , initVal , eqExpAtom , constDef , argExp , callFunc , block , relExp , argConst , decl , funcType , number , argFunctionR , funcFParam , argFunctionF , constExp , addExpAtom , assignExp , funcRParam , funcDef , argVarDecl , exp , mulExpAtom , constInitVal , compUnit , funcRParams , addExp , varDef , varDecl , eqExp , assignExpAtom , constDecl , lVal , relExpAtom , unaryOp , mulExp , blockItem }
s: program
first:
( constDecl ) : { 'const' }
( bType , varDef , argVarDecl , ';' ) : { 'int' }
( funcType , 'IDN' , '(' , funcFParams , ')' , block ) : { 'void' }
( bType , 'IDN' ) : { 'int' }
( block ) : { '{' }
( number ) : { 'INT' }
( primaryExp ) : { 'INT' , '(' }
( unaryExp , mulExpAtom ) : { 'INT' , '(' }
( mulExp , addExpAtom ) : { 'INT' , '(' }
( addExp , relExpAtom ) : { 'INT' , '(' }
( relExp , eqExpAtom ) : { 'INT' , '(' }
( eqExp , assignExpAtom ) : { 'INT' , '(' }
( assignExp ) : { 'INT' , '(' }
( exp ) : { 'INT' , '(' }
( funcRParam , argFunctionR ) : { 'INT' , '(' }
( exp , ';' ) : { 'INT' , '(' }
( stmt , blockItem ) : { 'INT' , ';' , '(' , 'return' , '{' }
( funcFParam , argFunctionF ) : { 'int' }
( constExp ) : { 'INT' , '(' }
( varDecl ) : { 'int' }
( funcDef , compUnit ) : { 'void' }
( decl , compUnit ) : { 'int' , 'const' }
( compUnit ) : { 'void' , $ , 'const' , 'int' }
( decl , blockItem ) : { 'int' , 'const' }
follow:
