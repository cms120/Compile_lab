1. Program -> compUnit;
2. compUnit -> (decl | funcDef)* EOF;
3. decl -> constDecl | varDecl;
4. constDecl -> 'const' bType constDef (',' constDef)* ';';
5. bType -> 'int';
6. constDef -> Ident '=' constInitVal;
7. constInitVal -> constExp
8. varDecl -> bType varDef (',' varDef)* ';';
9. varDef ->Ident| Ident '=' initVal ;
10. initVal -> exp;
11. funcDef -> funcType Ident '(' (funcFParams)? ')' block;
12. funcType -> 'void' | 'int' ;
13. funcFParams -> funcFParam (',' funcFParam)*;
14. funcFParam -> bType Ident;
15. block -> '{' (blockItem)* '}';
16. blockItem -> decl | stmt;
17. stmt ->lVal '=' exp ';'| (exp)? ';'| block |'return' (exp)? ';' ;
18. exp -> addExp;
19. cond -> lOrExp;
20. lVal -> Ident;
21. primaryExp -> '(' exp ')' | lVal | number;
22. number -> IntConst ;
23. unaryExp -> primaryExp| Ident '(' (funcRParams)? ')'| unaryOp unaryExp;
24. unaryOp -> '+' | '-' | '!';
25. funcRParams -> funcRParam (',' funcRParam)*;
26. funcRParam -> exp;
27. mulExp ->unaryExp| mulExp ('*' | '/' | '%') unaryExp ;
28. addExp -> mulExp # add1 | addExp ('+' | '-') mulExp;
29. relExp ->addExp| relExp ('<' | '>' | '<=' | '>=') addExp;
30. eqExp ->relExp| eqExp ('==' | '!=') relExp;
31. lAndExp -> eqExp | lAndExp '&&' eqExp;
32. lOrExp -> lAndExp| lOrExp '||' lAndExp;
33. constExp -> addExp;
34. IntConst -> [0-9]+ ;
35. Ident -> [a-zA-Z_][a-zA-Z_0-9]*;